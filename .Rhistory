shiny::runApp()
shiny::runApp()
t.test(1:5)
test <- t.test(1:5)
test$alternative
runApp()
runApp()
runApp()
runApp()
runApp()
1/sqrt(5)
runApp()
runApp()
runApp()
runApp()
runApp()
t.test2 <- function(x,V,m0 = 0,alpha = 0.05) {
M<-mean(x)
n<-length(x)
sigma<-sqrt(V)
S<-sqrt(V/n)
p<-(1 - pnorm((M-m0)/S))
LCL<-(M - S*qnorm(1-alpha/2))
UCL<-(M + S*qnorm(1-alpha/2))
statistic <- (M - m0) / S
value<-list(mean=M,sigma=sigma,statistic=statistic,p.value=p,LCL=LCL,UCL=UCL)
# print(sprintf("P-value = %g",p))
# print(sprintf("Lower %.2f%% Confidence Limit = %g",
#               alpha, LCL))
# print(sprintf("Upper %.2f%% Confidence Limit = %g",
#               alpha, UCL))
return(value)
}
test(1:5)
t.test2(1:5)
t.test2 <- function(x,V,m0 = 0,alpha = 0.05) {
M<-mean(x)
n<-length(x)
sigma<-sqrt(V)
S<-sqrt(V/n)
p<-(1 - pnorm((M-m0)/S))
LCL<-(M - S*qnorm(1-alpha/2))
UCL<-(M + S*qnorm(1-alpha/2))
statistic <- (M - m0) / S
value<-list(mean=M,sigma=sigma,statistic=statistic,p.value=p,LCL=LCL,UCL=UCL)
# print(sprintf("P-value = %g",p))
# print(sprintf("Lower %.2f%% Confidence Limit = %g",
#               alpha, LCL))
# print(sprintf("Upper %.2f%% Confidence Limit = %g",
#               alpha, UCL))
return(value)
}
t.test2(1:5, V = 1)
t.test2(1:5, V = 3)
t.test2(1:5, V = 3)
pnorm(2.236)
1-pnorm(2.236)
pnorm(2.236, lower.tail = FALSE)
2*pnorm(2.236, lower.tail = FALSE)
pnorm(2.236, lower.tail = FALSE)
pnorm(2.236, lower.tail = TRUE)
pnorm(-1.155, lower.tail = TRUE)
pnorm(-1.155, lower.Tail = FALSE)
pnorm(-1.155, lower.tail = FALSE)
pnorm(1.155, lower.tail = FALSE)
t.test2 <- function(x,V,m0 = 0,alpha = 0.05, alternative = "two.sided") {
M<-mean(x)
n<-length(x)
sigma<-sqrt(V)
S<-sqrt(V/n)
statistic <- (M - m0) / S
p <- if (alternative == "two.sided") {
2*pnorm(abs(statistic), lower.tail = FALSE)
} else if (alternative == "less") {
pnorm(statistic, lower.tail = TRUE)
} else {
pnorm(statistic, lower.tail = FALSE)
}
p <- (1 - pnorm((M-m0)/S))
LCL<-(M - S*qnorm(1-alpha/2))
UCL<-(M + S*qnorm(1-alpha/2))
value<-list(mean=M,sigma=sigma,statistic=statistic,p.value=p,LCL=LCL,UCL=UCL,alternative=alternative)
# print(sprintf("P-value = %g",p))
# print(sprintf("Lower %.2f%% Confidence Limit = %g",
#               alpha, LCL))
# print(sprintf("Upper %.2f%% Confidence Limit = %g",
#               alpha, UCL))
return(value)
}
t.test2(1:5, V = 3)
t.test2 <- function(x,V,m0 = 0,alpha = 0.05, alternative = "two.sided") {
M<-mean(x)
n<-length(x)
sigma<-sqrt(V)
S<-sqrt(V/n)
statistic <- (M - m0) / S
p <- if (alternative == "two.sided") {
2*pnorm(abs(statistic), lower.tail = FALSE)
} else if (alternative == "less") {
pnorm(statistic, lower.tail = TRUE)
} else {
pnorm(statistic, lower.tail = FALSE)
}
p <- (1 - pnorm((M-m0)/S))
LCL<-(M - S*qnorm(1-alpha/2))
UCL<-(M + S*qnorm(1-alpha/2))
value<-list(mean=M,sigma=sigma,statistic=statistic,p.value=p,LCL=LCL,UCL=UCL,alternative=alternative)
# print(sprintf("P-value = %g",p))
# print(sprintf("Lower %.2f%% Confidence Limit = %g",
#               alpha, LCL))
# print(sprintf("Upper %.2f%% Confidence Limit = %g",
#               alpha, UCL))
return(value)
}
t.test2(1:5, V = 3, alternative = "two.sided")
t.test2 <- function(x,V,m0 = 0,alpha = 0.05, alternative = "two.sided") {
M<-mean(x)
n<-length(x)
sigma<-sqrt(V)
S<-sqrt(V/n)
statistic <- (M - m0) / S
p <- if (alternative == "two.sided") {
2*pnorm(abs(statistic), lower.tail = FALSE)
} else if (alternative == "less") {
pnorm(statistic, lower.tail = TRUE)
} else {
pnorm(statistic, lower.tail = FALSE)
}
p <- (1 - pnorm((M-m0)/S))
LCL<-(M - S*qnorm(1-alpha/2))
UCL<-(M + S*qnorm(1-alpha/2))
value<-list(mean=M,sigma=sigma,statistic=statistic,p.value=p,LCL=LCL,UCL=UCL,alternative=alternative)
# print(sprintf("P-value = %g",p))
# print(sprintf("Lower %.2f%% Confidence Limit = %g",
#               alpha, LCL))
# print(sprintf("Upper %.2f%% Confidence Limit = %g",
#               alpha, UCL))
return(value)
}
t.test2(1:3, V = 3, m0 = 3, alternative = "greater")
t.test2(1:3, V = 4, m0 = 3, alternative = "greater")
t.test2(c(-1,-2,-3), V = 4, m0 = 3, alternative = "greater")
t.test2(c(-1,-2,-3), V = 4, m0 = 3, alternative = "less")
pnorm(-4.330127, lower.tail = TRUE)
t.test2 <- function(x,V,m0 = 0,alpha = 0.05, alternative = "two.sided") {
M<-mean(x)
n<-length(x)
sigma<-sqrt(V)
S<-sqrt(V/n)
statistic <- (M - m0) / S
p <- if (alternative == "two.sided") {
2*pnorm(abs(statistic), lower.tail = FALSE)
} else if (alternative == "less") {
pnorm(statistic, lower.tail = TRUE)
} else {
pnorm(statistic, lower.tail = FALSE)
}
p <- (1 - pnorm((M-m0)/S))
LCL<-(M - S*qnorm(1-alpha/2))
UCL<-(M + S*qnorm(1-alpha/2))
value<-list(mean=M,sigma=sigma,statistic=statistic,p.value=p,LCL=LCL,UCL=UCL,alternative=alternative)
# print(sprintf("P-value = %g",p))
# print(sprintf("Lower %.2f%% Confidence Limit = %g",
#               alpha, LCL))
# print(sprintf("Upper %.2f%% Confidence Limit = %g",
#               alpha, UCL))
return(value)
}
t.test2(c(-1,-2,-3), V = 4, m0 = 3, alternative = "less")
t.test2 <- function(x,V,m0 = 0,alpha = 0.05, alternative = "two.sided") {
M<-mean(x)
n<-length(x)
sigma<-sqrt(V)
S<-sqrt(V/n)
statistic <- (M - m0) / S
p <- if (alternative == "two.sided") {
2*pnorm(abs(statistic), lower.tail = FALSE)
} else if (alternative == "less") {
pnorm(statistic, lower.tail = TRUE)
} else {
pnorm(statistic, lower.tail = FALSE)
}
p <- (1 - pnorm((M-m0)/S))
LCL<-(M - S*qnorm(1-alpha/2))
UCL<-(M + S*qnorm(1-alpha/2))
value<-list(mean=M,sigma=sigma,statistic=statistic,p.value=p,LCL=LCL,UCL=UCL,alternative=alternative)
# print(sprintf("P-value = %g",p))
# print(sprintf("Lower %.2f%% Confidence Limit = %g",
#               alpha, LCL))
# print(sprintf("Upper %.2f%% Confidence Limit = %g",
#               alpha, UCL))
return(value)
}
t.test2(c(-1,-2,-3), V = 4, m0 = 3)
t.test2 <- function(x,V,m0 = 0,alpha = 0.05, alternative = "two.sided") {
M<-mean(x)
n<-length(x)
sigma<-sqrt(V)
S<-sqrt(V/n)
statistic <- (M - m0) / S
p <- if (alternative == "two.sided") {
2*pnorm(abs(statistic), lower.tail = FALSE)
} else if (alternative == "less") {
pnorm(statistic, lower.tail = TRUE)
} else {
pnorm(statistic, lower.tail = FALSE)
}
p <- (1 - pnorm((M-m0)/S))
LCL<-(M - S*qnorm(1-alpha/2))
UCL<-(M + S*qnorm(1-alpha/2))
value<-list(mean=M,sigma=sigma,statistic=statistic,p.value=p,LCL=LCL,UCL=UCL,alternative=alternative)
# print(sprintf("P-value = %g",p))
# print(sprintf("Lower %.2f%% Confidence Limit = %g",
#               alpha, LCL))
# print(sprintf("Upper %.2f%% Confidence Limit = %g",
#               alpha, UCL))
return(value)
}
t.test2(c(1:3), V = 4, m0 = 3)
t.test2 <- function(x,V,m0 = 0,alpha = 0.05, alternative = "two.sided") {
M<-mean(x)
n<-length(x)
sigma<-sqrt(V)
S<-sqrt(V/n)
statistic <- (M - m0) / S
p <- if (alternative == "two.sided") {
2*pnorm(abs(statistic), lower.tail = FALSE)
} else if (alternative == "less") {
pnorm(statistic, lower.tail = TRUE)
} else {
pnorm(statistic, lower.tail = FALSE)
}
# p <- (1 - pnorm((M-m0)/S))
LCL<-(M - S*qnorm(1-alpha/2))
UCL<-(M + S*qnorm(1-alpha/2))
value<-list(mean=M,sigma=sigma,statistic=statistic,p.value=p,LCL=LCL,UCL=UCL,alternative=alternative)
# print(sprintf("P-value = %g",p))
# print(sprintf("Lower %.2f%% Confidence Limit = %g",
#               alpha, LCL))
# print(sprintf("Upper %.2f%% Confidence Limit = %g",
#               alpha, UCL))
return(value)
}
t.test2(c(1:3), V = 4, m0 = 3)
t.test2(c(-1,-2,-3), V = 4, m0 = 3)
t.test2(c(-1,-2,-3), V = 4, m0 = 3, alternative = "greater")
t.test2(c(-1,-2,-3), V = 4, m0 = 3, alternative = "less")
t.test2(c(1:3), V = 4, m0 = 3, alternative = "less")
t.test2(c(1:3), V = 4, m0 = 3, alternative = "greater")
t.test2 <- function(x,V,m0 = 0,alpha = 0.05, alternative = "two.sided") {
M<-mean(x)
n<-length(x)
sigma<-sqrt(V)
S<-sqrt(V/n)
statistic <- (M - m0) / S
p <- if (alternative == "two.sided") {
2*pnorm(abs(statistic), lower.tail = FALSE)
} else if (alternative == "less") {
pnorm(statistic, lower.tail = TRUE)
} else {
pnorm(statistic, lower.tail = FALSE)
}
# p <- (1 - pnorm((M-m0)/S))
LCL<-(M - S*qnorm(1-alpha/2))
UCL<-(M + S*qnorm(1-alpha/2))
value<-list(mean=M,m0=m0,sigma=sigma,statistic=statistic,p.value=p,LCL=LCL,UCL=UCL,alternative=alternative)
# print(sprintf("P-value = %g",p))
# print(sprintf("Lower %.2f%% Confidence Limit = %g",
#               alpha, LCL))
# print(sprintf("Upper %.2f%% Confidence Limit = %g",
#               alpha, UCL))
return(value)
}
t.test2(c(1:3), V = 4, m0 = 3, alternative = "greater")
runApp()
runApp()
runApp()
sd(1)
runApp()
t.test(x = 1:2, y = 2:3)
runApp()
0.707^2
runApp()
t.test(x = 1:2, y = 2:3)
test <- t.test(x = 1:2, y = 2:3)
test$estimate
runApp()
test$parameter
runApp()
test$statistic
str(test)
runApp()
dat1 <- 1:2
dat2 <- c(3,5)
s_p <- sqrt( ((length(dat1)-1)*var(dat1) + (length(dat2)-1)*var(dat2)) / test_confint$parameter )
s_p <- sqrt( ((length(dat1)-1)*var(dat1) + (length(dat2)-1)*var(dat2)) / 2 )
s_p
runApp()
sqrt(0.5)
sqrt(2)
runApp()
3.6 - 6.435 + (3.182 * 2.902 * 0.913)
(3.6 - 6.435) + (3.182 * 2.902 * 0.913)
(3.6 - 6.435) - (3.182 * 2.902 * 0.913)
runApp()
shiny::runApp()
version

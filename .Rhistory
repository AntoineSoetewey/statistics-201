p <- (1 - pnorm((M-m0)/S))
LCL<-(M - S*qnorm(1-alpha/2))
UCL<-(M + S*qnorm(1-alpha/2))
value<-list(mean=M,sigma=sigma,statistic=statistic,p.value=p,LCL=LCL,UCL=UCL,alternative=alternative)
# print(sprintf("P-value = %g",p))
# print(sprintf("Lower %.2f%% Confidence Limit = %g",
#               alpha, LCL))
# print(sprintf("Upper %.2f%% Confidence Limit = %g",
#               alpha, UCL))
return(value)
}
t.test2(1:5, V = 3, alternative = "two.sided")
t.test2 <- function(x,V,m0 = 0,alpha = 0.05, alternative = "two.sided") {
M<-mean(x)
n<-length(x)
sigma<-sqrt(V)
S<-sqrt(V/n)
statistic <- (M - m0) / S
p <- if (alternative == "two.sided") {
2*pnorm(abs(statistic), lower.tail = FALSE)
} else if (alternative == "less") {
pnorm(statistic, lower.tail = TRUE)
} else {
pnorm(statistic, lower.tail = FALSE)
}
p <- (1 - pnorm((M-m0)/S))
LCL<-(M - S*qnorm(1-alpha/2))
UCL<-(M + S*qnorm(1-alpha/2))
value<-list(mean=M,sigma=sigma,statistic=statistic,p.value=p,LCL=LCL,UCL=UCL,alternative=alternative)
# print(sprintf("P-value = %g",p))
# print(sprintf("Lower %.2f%% Confidence Limit = %g",
#               alpha, LCL))
# print(sprintf("Upper %.2f%% Confidence Limit = %g",
#               alpha, UCL))
return(value)
}
t.test2(1:3, V = 3, m0 = 3, alternative = "greater")
t.test2(1:3, V = 4, m0 = 3, alternative = "greater")
t.test2(c(-1,-2,-3), V = 4, m0 = 3, alternative = "greater")
t.test2(c(-1,-2,-3), V = 4, m0 = 3, alternative = "less")
pnorm(-4.330127, lower.tail = TRUE)
t.test2 <- function(x,V,m0 = 0,alpha = 0.05, alternative = "two.sided") {
M<-mean(x)
n<-length(x)
sigma<-sqrt(V)
S<-sqrt(V/n)
statistic <- (M - m0) / S
p <- if (alternative == "two.sided") {
2*pnorm(abs(statistic), lower.tail = FALSE)
} else if (alternative == "less") {
pnorm(statistic, lower.tail = TRUE)
} else {
pnorm(statistic, lower.tail = FALSE)
}
p <- (1 - pnorm((M-m0)/S))
LCL<-(M - S*qnorm(1-alpha/2))
UCL<-(M + S*qnorm(1-alpha/2))
value<-list(mean=M,sigma=sigma,statistic=statistic,p.value=p,LCL=LCL,UCL=UCL,alternative=alternative)
# print(sprintf("P-value = %g",p))
# print(sprintf("Lower %.2f%% Confidence Limit = %g",
#               alpha, LCL))
# print(sprintf("Upper %.2f%% Confidence Limit = %g",
#               alpha, UCL))
return(value)
}
t.test2(c(-1,-2,-3), V = 4, m0 = 3, alternative = "less")
t.test2 <- function(x,V,m0 = 0,alpha = 0.05, alternative = "two.sided") {
M<-mean(x)
n<-length(x)
sigma<-sqrt(V)
S<-sqrt(V/n)
statistic <- (M - m0) / S
p <- if (alternative == "two.sided") {
2*pnorm(abs(statistic), lower.tail = FALSE)
} else if (alternative == "less") {
pnorm(statistic, lower.tail = TRUE)
} else {
pnorm(statistic, lower.tail = FALSE)
}
p <- (1 - pnorm((M-m0)/S))
LCL<-(M - S*qnorm(1-alpha/2))
UCL<-(M + S*qnorm(1-alpha/2))
value<-list(mean=M,sigma=sigma,statistic=statistic,p.value=p,LCL=LCL,UCL=UCL,alternative=alternative)
# print(sprintf("P-value = %g",p))
# print(sprintf("Lower %.2f%% Confidence Limit = %g",
#               alpha, LCL))
# print(sprintf("Upper %.2f%% Confidence Limit = %g",
#               alpha, UCL))
return(value)
}
t.test2(c(-1,-2,-3), V = 4, m0 = 3)
t.test2 <- function(x,V,m0 = 0,alpha = 0.05, alternative = "two.sided") {
M<-mean(x)
n<-length(x)
sigma<-sqrt(V)
S<-sqrt(V/n)
statistic <- (M - m0) / S
p <- if (alternative == "two.sided") {
2*pnorm(abs(statistic), lower.tail = FALSE)
} else if (alternative == "less") {
pnorm(statistic, lower.tail = TRUE)
} else {
pnorm(statistic, lower.tail = FALSE)
}
p <- (1 - pnorm((M-m0)/S))
LCL<-(M - S*qnorm(1-alpha/2))
UCL<-(M + S*qnorm(1-alpha/2))
value<-list(mean=M,sigma=sigma,statistic=statistic,p.value=p,LCL=LCL,UCL=UCL,alternative=alternative)
# print(sprintf("P-value = %g",p))
# print(sprintf("Lower %.2f%% Confidence Limit = %g",
#               alpha, LCL))
# print(sprintf("Upper %.2f%% Confidence Limit = %g",
#               alpha, UCL))
return(value)
}
t.test2(c(1:3), V = 4, m0 = 3)
t.test2 <- function(x,V,m0 = 0,alpha = 0.05, alternative = "two.sided") {
M<-mean(x)
n<-length(x)
sigma<-sqrt(V)
S<-sqrt(V/n)
statistic <- (M - m0) / S
p <- if (alternative == "two.sided") {
2*pnorm(abs(statistic), lower.tail = FALSE)
} else if (alternative == "less") {
pnorm(statistic, lower.tail = TRUE)
} else {
pnorm(statistic, lower.tail = FALSE)
}
# p <- (1 - pnorm((M-m0)/S))
LCL<-(M - S*qnorm(1-alpha/2))
UCL<-(M + S*qnorm(1-alpha/2))
value<-list(mean=M,sigma=sigma,statistic=statistic,p.value=p,LCL=LCL,UCL=UCL,alternative=alternative)
# print(sprintf("P-value = %g",p))
# print(sprintf("Lower %.2f%% Confidence Limit = %g",
#               alpha, LCL))
# print(sprintf("Upper %.2f%% Confidence Limit = %g",
#               alpha, UCL))
return(value)
}
t.test2(c(1:3), V = 4, m0 = 3)
t.test2(c(-1,-2,-3), V = 4, m0 = 3)
t.test2(c(-1,-2,-3), V = 4, m0 = 3, alternative = "greater")
t.test2(c(-1,-2,-3), V = 4, m0 = 3, alternative = "less")
t.test2(c(1:3), V = 4, m0 = 3, alternative = "less")
t.test2(c(1:3), V = 4, m0 = 3, alternative = "greater")
t.test2 <- function(x,V,m0 = 0,alpha = 0.05, alternative = "two.sided") {
M<-mean(x)
n<-length(x)
sigma<-sqrt(V)
S<-sqrt(V/n)
statistic <- (M - m0) / S
p <- if (alternative == "two.sided") {
2*pnorm(abs(statistic), lower.tail = FALSE)
} else if (alternative == "less") {
pnorm(statistic, lower.tail = TRUE)
} else {
pnorm(statistic, lower.tail = FALSE)
}
# p <- (1 - pnorm((M-m0)/S))
LCL<-(M - S*qnorm(1-alpha/2))
UCL<-(M + S*qnorm(1-alpha/2))
value<-list(mean=M,m0=m0,sigma=sigma,statistic=statistic,p.value=p,LCL=LCL,UCL=UCL,alternative=alternative)
# print(sprintf("P-value = %g",p))
# print(sprintf("Lower %.2f%% Confidence Limit = %g",
#               alpha, LCL))
# print(sprintf("Upper %.2f%% Confidence Limit = %g",
#               alpha, UCL))
return(value)
}
t.test2(c(1:3), V = 4, m0 = 3, alternative = "greater")
runApp()
runApp()
runApp()
sd(1)
runApp()
t.test(x = 1:2, y = 2:3)
runApp()
0.707^2
runApp()
t.test(x = 1:2, y = 2:3)
test <- t.test(x = 1:2, y = 2:3)
test$estimate
runApp()
test$parameter
runApp()
test$statistic
str(test)
runApp()
dat1 <- 1:2
dat2 <- c(3,5)
s_p <- sqrt( ((length(dat1)-1)*var(dat1) + (length(dat2)-1)*var(dat2)) / test_confint$parameter )
s_p <- sqrt( ((length(dat1)-1)*var(dat1) + (length(dat2)-1)*var(dat2)) / 2 )
s_p
runApp()
sqrt(0.5)
sqrt(2)
runApp()
3.6 - 6.435 + (3.182 * 2.902 * 0.913)
(3.6 - 6.435) + (3.182 * 2.902 * 0.913)
(3.6 - 6.435) - (3.182 * 2.902 * 0.913)
runApp()
shiny::runApp()
version
shiny::runApp()
sqrt(0.5)
sqrt(7)
sqrt(2)
runApp()
sqrt(1/3 + 1/2)
runApp()
>>>>>>> 46789c03c71f8d4fe57242e61c32daf21d5e0994
shiny::runApp()
shiny::runApp()
runApp()
t.test(x = c(1,2), y = c(3,5))$estimate
runApp()
t.test(x = c(1,2), y = c(3,5))$alternative
t.test(x = c(1,2), y = c(3,5))
runApp()
shiny::runApp()
shiny::runApp()
t.test(x = c(1:3), y = c(3,5,7,9), var.equal = FALSE)
runApp()
t.test(x = 1:3, y = c(3,5,7,9, var.equal = FALSE))
test <- t.test(x = 1:3, y = c(3,5,7,9, var.equal = FALSE))
str(test)
runApp()
test <- t.test(x = 1:3, y = c(3,5,7,9), var.equal = FALSE)
str(test)
runApp()
runApp()
runApp()
str(test)
runApp()
sqrt(1/3 + 2.58205344639^2 / 4)
sqrt((1/3) + ((2.58205344639^2) / 4))
runApp()
test
runApp()
str(test)
runApp()
qnorm(1-0.025)
t.test3 <- function(x, y, V1, V2, m0 = 0,alpha = 0.05, alternative = "two.sided") {
t.test3 <- function(x, y, V1, V2, m0 = 0,alpha = 0.05, alternative = "two.sided") {
M1 <- mean(x)
M2 <- mean(y)
n1 <- length(x)
n2 <- length(y)
sigma1 <- sqrt(V1)
sigma2 <- sqrt(V2)
S <- sqrt((V1/n1) + (V2/n2))
statistic <- (M1 - M2 - m0) / S
p <- if (alternative == "two.sided") {
2*pnorm(abs(statistic), lower.tail = FALSE)
} else if (alternative == "less") {
pnorm(statistic, lower.tail = TRUE)
} else {
pnorm(statistic, lower.tail = FALSE)
}
# p <- (1 - pnorm((M-m0)/S))
LCL<-(M1 - M2 - S*qnorm(1-alpha/2))
UCL<-(M1 - M2 + S*qnorm(1-alpha/2))
value<-list(mean1=M1, mean2 = M2,m0=m0,sigma1=sigma1, sigma2=sigma2,statistic=statistic,p.value=p,LCL=LCL,UCL=UCL,alternative=alternative)
# print(sprintf("P-value = %g",p))
# print(sprintf("Lower %.2f%% Confidence Limit = %g",
#               alpha, LCL))
# print(sprintf("Upper %.2f%% Confidence Limit = %g",
#               alpha, UCL))
return(value)
t.test3 <- function(x, y, V1, V2, m0 = 0,alpha = 0.05, alternative = "two.sided") {
t.test3 <- function(x, y, V1, V2, m0 = 0,alpha = 0.05, alternative = "two.sided") {
M1 <- mean(x)
M2 <- mean(y)
n1 <- length(x)
n2 <- length(y)
sigma1 <- sqrt(V1)
sigma2 <- sqrt(V2)
S <- sqrt((V1/n1) + (V2/n2))
statistic <- (M1 - M2 - m0) / S
p <- if (alternative == "two.sided") {
2*pnorm(abs(statistic), lower.tail = FALSE)
} else if (alternative == "less") {
pnorm(statistic, lower.tail = TRUE)
} else {
pnorm(statistic, lower.tail = FALSE)
}
# p <- (1 - pnorm((M-m0)/S))
LCL<-(M1 - M2 - S*qnorm(1-alpha/2))
UCL<-(M1 - M2 + S*qnorm(1-alpha/2))
value<-list(mean1=M1, mean2 = M2,m0=m0,sigma1=sigma1, sigma2=sigma2,statistic=statistic,p.value=p,LCL=LCL,UCL=UCL,alternative=alternative)
# print(sprintf("P-value = %g",p))
# print(sprintf("Lower %.2f%% Confidence Limit = %g",
#               alpha, LCL))
# print(sprintf("Upper %.2f%% Confidence Limit = %g",
#               alpha, UCL))
return(value)
t.test3 <- function(x, y, V1, V2, m0 = 0,alpha = 0.05, alternative = "two.sided") {
M1 <- mean(x)
M2 <- mean(y)
n1 <- length(x)
n2 <- length(y)
sigma1 <- sqrt(V1)
sigma2 <- sqrt(V2)
S <- sqrt((V1/n1) + (V2/n2))
statistic <- (M1 - M2 - m0) / S
p <- if (alternative == "two.sided") {
2*pnorm(abs(statistic), lower.tail = FALSE)
} else if (alternative == "less") {
pnorm(statistic, lower.tail = TRUE)
} else {
pnorm(statistic, lower.tail = FALSE)
}
# p <- (1 - pnorm((M-m0)/S))
LCL<-(M1 - M2 - S*qnorm(1-alpha/2))
UCL<-(M1 - M2 + S*qnorm(1-alpha/2))
value<-list(mean1=M1, mean2 = M2,m0=m0,sigma1=sigma1, sigma2=sigma2,statistic=statistic,p.value=p,LCL=LCL,UCL=UCL,alternative=alternative)
# print(sprintf("P-value = %g",p))
# print(sprintf("Lower %.2f%% Confidence Limit = %g",
#               alpha, LCL))
# print(sprintf("Upper %.2f%% Confidence Limit = %g",
#               alpha, UCL))
return(value)
}
t.test3(x = 1:3, y = c(3,5,7,9), V1 = 1.2, V2 = 1.3)
t.test3(x = 1:3, y = c(3,5,7,9), V1 = 1.2^2, V2 = 1.3^2)
t.test3(x = 1:3, y = c(3,5,7,9), V1 = 1.2^2, V2 = 1.3^2, mu = 3)
t.test3(x = 1:3, y = c(3,5,7,9), V1 = 1.2^2, V2 = 1.3^2, m0 = 3)
t.test3(x = 1:3, y = c(3,5,7,9), V1 = 1.2^2, V2 = 1.3^2, m0 = -3.7)
runApp()
sqrt(4/3 + 9/4)
runApp()
sqrt(4/3 + 9/4)
sqrt((4/3) + (9/4))
runApp()
plot(rnorm(10))
plot(rnorm(10))
runApp()
plot(1:3)
plot(1:3)
runApp()
funcShaded <- function(x) {
y <- dt(x, df = 4)
y[x > qt(input$alpha/2, df = 4, lower.tail = FALSE)] <- NA
return(y)
}
p <- ggplot(data.frame(x = c(qt(0.99999, df = 4, lower.tail = FALSE), qt(0.99999, df = 4, lower.tail = TRUE))), aes(x = x)) +
stat_function(fun = dt, args = list(df = 4)) +
stat_function(fun=funcShaded, geom="area", alpha=0.8) +
theme_minimal() +
ggtitle(paste0("t distribution")) +
theme(plot.title = element_text(face="bold", hjust = 0.5)) +
ylab("Density") +
xlab("x")
p
p
funcShaded <- function(x) {
y <- dt(x, df = 4)
y[x > qt(input$alpha/2, df = 4, lower.tail = FALSE)] <- NA
return(y)
}
funcShaded()
funcShaded(10)
funcShaded <- function(x) {
y <- dt(x, df = 4)
y[x > qt(0.05/2, df = 4, lower.tail = FALSE)] <- NA
return(y)
}
p <- ggplot(data.frame(x = c(qt(0.99999, df = 4, lower.tail = FALSE), qt(0.99999, df = 4, lower.tail = TRUE))), aes(x = x)) +
stat_function(fun = dt, args = list(df = 4)) +
stat_function(fun=funcShaded, geom="area", alpha=0.8) +
theme_minimal() +
ggtitle(paste0("t distribution")) +
theme(plot.title = element_text(face="bold", hjust = 0.5)) +
ylab("Density") +
xlab("x")
p
funcShaded <- function(x) {
y <- dt(x, df = 4)
y[x > 1.7] <- NA
return(y)
}
p <- ggplot(data.frame(x = c(qt(0.99999, df = 4, lower.tail = FALSE), qt(0.99999, df = 4, lower.tail = TRUE))), aes(x = x)) +
stat_function(fun = dt, args = list(df = 4)) +
stat_function(fun=funcShaded, geom="area", alpha=0.8) +
theme_minimal() +
ggtitle(paste0("t distribution")) +
theme(plot.title = element_text(face="bold", hjust = 0.5)) +
ylab("Density") +
xlab("x")
p
library(shiny)
library(dplyr)
library(ggplot2)
library(dplyr)
library(mixdist)
funcShaded <- function(x) {
y <- dt(x, df = 4)
y[x > 1.7] <- NA
return(y)
}
p <- ggplot(data.frame(x = c(qt(0.99999, df = 4, lower.tail = FALSE), qt(0.99999, df = 4, lower.tail = TRUE))), aes(x = x)) +
stat_function(fun = dt, args = list(df = 4)) +
stat_function(fun=funcShaded, geom="area", alpha=0.8) +
theme_minimal() +
ggtitle(paste0("t distribution")) +
theme(plot.title = element_text(face="bold", hjust = 0.5)) +
ylab("Density") +
xlab("x")
p
funcShaded <- function(x) {
y <- dt(x, df = 4)
y[x > 1.7] <- NA
return(y)
}
p <- ggplot(data.frame(x = c(qt(0.99999, df = 4, lower.tail = FALSE), qt(0.99999, df = 4, lower.tail = TRUE))), aes(x = x)) +
stat_function(fun = dt, args = list(df = 4)) +
#stat_function(fun=funcShaded, geom="area", alpha=0.8) +
theme_minimal() +
ggtitle(paste0("t distribution")) +
theme(plot.title = element_text(face="bold", hjust = 0.5)) +
ylab("Density") +
xlab("x")
p
library(shiny)
library(dplyr)
library(ggplot2)
library(dplyr)
library(mixdist)
funcShaded <- function(x) {
y <- dt(x, df = 4)
y[x > 1.7] <- NA
return(y)
}
p <- ggplot(data.frame(x = c(qt(0.99999, df = 4, lower.tail = FALSE), qt(0.99999, df = 4, lower.tail = TRUE))), aes(x = x)) +
# stat_function(fun = dt, args = list(df = 4)) +
stat_function(fun=funcShaded, geom="area", alpha=0.8) +
theme_minimal() +
ggtitle(paste0("t distribution")) +
theme(plot.title = element_text(face="bold", hjust = 0.5)) +
ylab("Density") +
xlab("x")
p
p <- ggplot(data.frame(x = c(qt(0.99999, df = 4, lower.tail = FALSE), qt(0.99999, df = 4, lower.tail = TRUE))), aes(x = x)) +
stat_function(fun = dt, args = list(df = 4)) +
stat_function(fun=funcShaded, geom="area", alpha=0.8) +
# theme_minimal() +
# ggtitle(paste0("t distribution")) +
# theme(plot.title = element_text(face="bold", hjust = 0.5)) +
ylab("Density") +
xlab("x")
p
funcShaded <- function(x) {
y <- dnorm(x, mean = 0.2, sd = 0.1)
y[x < 0.2 | x > (0.2 + 4 * 0.1)] <- NA
return(y)
}
p9 <- p9 + stat_function(fun=funcShaded, geom="area", fill="#84CA72", alpha=0.2)
p9
library(shiny)
library(dplyr)
library(ggplot2)
library(dplyr)
library(mixdist)
funcShaded <- function(x) {
y <- dnorm(x, mean = 0.2, sd = 0.1)
y[x < 0.2 | x > (0.2 + 4 * 0.1)] <- NA
return(y)
}
p9 <- ggplot(data.frame(x = c(-4, 4)), aes(x = x)) +
stat_function(fun = dnorm)
p9
p9 <- p9 + stat_function(fun=funcShaded, geom="area", fill="#84CA72", alpha=0.2)
p9
funcShaded <- function(x) {
y <- dnorm(x, mean = 0.2, sd = 0.1)
y[x < 0.2 | x > (0.2 + 4 * 0.1)] <- NA
return(y)
}
p9 <- ggplot(data.frame(x = c(-4, 4)), aes(x = x)) +
stat_function(fun = dnorm)
p9
p9 <- ggplot(data.frame(x = c(-4, 4)), aes(x = x)) +
stat_function(fun = dt, args = list(df = 8))
p9
dev.off()
p9 <- ggplot(data.frame(x = c(-4, 4)), aes(x = x)) +
stat_function(fun = dt, args = list(df = 8))
p9
runApp()
round(qt(0.05/2, df = 4, lower.tail = FALSE), 3)
runApp()
qt(0.05/2, df = 4)
qt(0.05/2, df = 4, lower.tail = TRUE)
qt(0.05/2, df = 4, lower.tail = FALSE)
runApp()
funcShaded <- function(x) {
y <- dt(x, df = test$parameter)
y[x < qt(input$alpha/2, df = test$parameter, lower.tail = FALSE) & x > qt(input$alpha/2, df = test$parameter) ] <- NA
return(y)
}
funcShaded(1:3)
funcShaded <- function(x) {
y <- dt(x, df = 4)
y[x < qt(0.05/2, df = 4, lower.tail = FALSE) & x > qt(0.05/2, df = 4) ] <- NA
return(y)
}
funcShaded(1:3)
runApp()
runApp()
qnorm(0.025, mean = 0.56, sd = 1.067)
runApp()
